{"version":3,"sources":["default-messages.js","drawing.js","lines.js","map.js","persian-date-picker.js","send-on.js","socket.js","test-sms.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClpzHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"tpanel-directives.js","sourcesContent":["angular\n    .module('inspinia')\n    .directive('defaultMessages', function(){\n    \treturn {\n    \t\ttemplateUrl: 'views/common/default_messages.html',\n    \t\tcontroller: function($rootScope, $scope, $http){\n    \t\t\t$http({\n    \t\t\t\turl: 'sms/default-messages?type=directive',\n    \t\t\t\tmethod: 'get'\n    \t\t\t}).then(function(res){\n    \t\t\t\t$rootScope.defaultMessages = res.data;\n    \t\t\t});\n\n    \t\t\t$rootScope.defaultMessageChanged = function(val){\n    \t\t\t\t$rootScope.info.text = val;\n    \t\t\t}\n    \t\t}\n    \t}\n    });","angular\n    .module('inspinia')\n    .service('polygonMapDrawingService', function($rootScope) {\n\n        return {\n\n            map: null,\n\n            selectedPolygon: null,\n\n            selectedShapeIsNew: false,\n\n            construct: function() {\n\n                this.map = new google.maps.Map(document.getElementById('map'), {\n                    zoom: 11,\n                    center: {\n                        lat: 35.758632352057,\n                        lng: 51.253672598395\n                    },\n                });\n\n                var triangleCoords = [];\n\n                var polygonMapDrawingService = this;\n\n                jQuery.ajax({\n                    url: '/sms/map/polygons',\n                    method: 'get',\n                    type: 'json',\n                    success: function(res) {\n                        triangleCoords = res;\n                        polygonMapDrawingService.constructMap(res);\n                    }\n                });\n\n                this.constructDrawings();\n\n            },\n\n            constructMap: function(polygons) {\n\n                var polygonMapDrawingService = this;\n\n                for (var index in polygons) {\n                    var smsPolygons = new google.maps.Polygon({\n                        map_state_id: polygons[index].id,\n                        clickable: true,\n                        paths: polygons[index].polygon,\n                        strokeColor: '#FF0000',\n                        strokeOpacity: 0.8,\n                        strokeWeight: 2,\n                        fillColor: '#FF0000',\n                        fillOpacity: 0.35\n                    });\n                    smsPolygons.setMap(polygonMapDrawingService.map);\n\n                    google.maps.event.addListener(smsPolygons, 'click', function(event) {\n\n                        polygonMapDrawingService.selectedShapeIsNew = false;\n\n                        polygonMapDrawingService.selectedPolygon = this.map_state_id;\n\n                        $rootScope.$broadcast('shapeSelected', polygonMapDrawingService);\n\n                    });\n                }\n            },\n\n            constructDrawings: function() {\n\n                var polygonMapDrawingService = this;\n\n                var drawingManager = new google.maps.drawing.DrawingManager({\n                    drawingMode: google.maps.drawing.OverlayType.MARKER,\n                    drawingControl: true,\n                    drawingControlOptions: {\n                        position: google.maps.ControlPosition.TOP_CENTER,\n                        drawingModes: ['polygon']\n                    }\n                });\n\n                drawingManager.setMap(polygonMapDrawingService.map);\n\n                google.maps.event.addListener(drawingManager, 'overlaycomplete', function(e) {\n                    var newShape = e.overlay;\n                    newShape.type = e.type;\n                    google.maps.event.addListener(newShape, 'click', function() {\n\n                        polygonMapDrawingService.selectedShapeIsNew = true;\n                        polygonMapDrawingService.selectedPolygon = polygonMapDrawingService.shapeSelected(newShape.getPath().b);\n\n                        $rootScope.$broadcast('shapeSelected', polygonMapDrawingService);\n\n                    });\n                });\n            },\n\n            shapeSelected: function(shape) {\n                var polygon = [];\n                for (index in shape) {\n                    polygon.push({\n                        lat: shape[index].lat(),\n                        lng: shape[index].lng()\n                    });\n                }\n\n                return polygon;\n            }\n\n        }\n\n    })\n    .directive('tDrawing', function() {\n        return {\n            templateUrl: 'views/common/map.html',\n            controller: function($rootScope, $scope, $http, polygonMapDrawingService) {\n\n                $rootScope.info = {};\n\n                polygonMapDrawingService.construct();\n\n                $rootScope.$on('shapeSelected', function(event, data){\n                    \n                    $rootScope.info.selectedPolygon = data.selectedPolygon;\n                    $rootScope.info.selectedShapeIsNew = data.selectedShapeIsNew;\n\n                });\n\n            },\n\n        }\n    });","angular\n    .module('inspinia')\n    .directive('lines', function(){\n    \treturn {\n    \t\ttemplateUrl: 'views/common/lines.html',\n    \t\tcontroller: function($rootScope, $scope, $http, $attrs){\n                $rootScope.lineIdNumbers = [];\n                $rootScope.linesRahyab = [];\n                var url = 'lines/to-send';\n                if($attrs.rahyab){\n                    url = 'lines/to-send?rahyab=true';\n                }\n    \t\t\t$http({\n\t\t\t\t\turl: url,\n\t\t\t\t\tmethod: 'get',\n\t\t\t\t}).then(function(res){\n\t\t\t\t\t$rootScope.linesToSend = res.data;\n                    if(typeof $rootScope.linesToSend == 'object'){\n                        res.data = $rootScope.linesToSend;\n                    }\n                    for(key in res.data){\n                        $rootScope.lineIdNumbers[$rootScope.linesToSend[key].id] = $rootScope.linesToSend[key].number;\n                        $rootScope.linesRahyab[$rootScope.linesToSend[key].id] = $rootScope.linesToSend[key].rahyab;\n                    }\n                    console.log($rootScope.linesToSend.length);\n\t\t\t\t});\n    \t\t}\n    \t}\n    });","angular\n    .module('inspinia')\n\n.service('polygonMapService', function($rootScope) {\n\n    return {\n\n        map: null,\n\n        selectedPolygon: [],\n\n        selectedShapeIsNew: false,\n\n        construct: function() {\n\n            this.map = new google.maps.Map(document.getElementById('map'), {\n                zoom: 11,\n                center: {\n                    lat: 35.758632352057,\n                    lng: 51.253672598395\n                },\n            });\n\n            var triangleCoords = [];\n\n            var polygonMapService = this;\n\n            jQuery.ajax({\n                url: '/sms/map/polygons',\n                method: 'get',\n                type: 'json',\n                success: function(res) {\n                    triangleCoords = res;\n                    polygonMapService.constructMap(res);\n                }\n            });\n\n        },\n\n        constructMap: function(polygons) {\n\n            var polygonMapService = this;\n\n            for (var index in polygons) {\n                var smsPolygons = new google.maps.Polygon({\n                    map_state_id: polygons[index].id,\n                    clickable: true,\n                    paths: polygons[index].polygon,\n                    strokeColor: '#FF0000',\n                    strokeOpacity: 0.8,\n                    strokeWeight: 2,\n                    fillColor: '#FF0000',\n                    fillOpacity: 0.35\n                });\n                smsPolygons.setMap(polygonMapService.map);\n\n                google.maps.event.addListener(smsPolygons, 'click', function(event) {\n\n                    if (this.fillColor == '#FF0000') {\n\n                        polygonMapService.selectedPolygon.push(this.map_state_id);\n\n                        this.setOptions({\n                            fillColor: 'green'\n                        });\n\n                    } else {\n\n                        polygonMapService.selectedPolygon.splice(polygonMapService.selectedPolygon.indexOf(this.map_state_id), 1)\n\n                        this.setOptions({\n                            fillColor: '#FF0000'\n                        });\n\n                    }\n\n                    $rootScope.$broadcast('shapeSelected', polygonMapService);\n\n                });\n            }\n        }\n\n    }\n\n})\n\n.directive('tMap', function() {\n    return {\n        templateUrl: 'views/common/map.html',\n        controller: function($rootScope, $scope, $http, polygonMapService, $http) {\n\n            $rootScope.info = {};\n\n            polygonMapService.construct();\n\n            $rootScope.selectedShapesCount = 0;\n\n            $rootScope.$on('shapeSelected', function(event, data) {\n\n                $rootScope.info.selectedPolygon = data.selectedPolygon;\n                $rootScope.info.selectedShapeIsNew = data.selectedShapeIsNew;\n\n                $http({\n\n                    url: '/sms/map/count',\n                    method: 'post',\n                    type: 'json',\n                    data: {\n                        regions: $rootScope.info.selectedPolygon\n                    }\n                }).then(function(res)\n                {\n                    $rootScope.selectedShapesCount = res.data;\n                    console.log($rootScope);\n                });\n\n            });\n\n        },\n\n    }\n});","angular\n    .module('inspinia')\n    .directive('persianDatePicker', function(){\n\n    \treturn {\n    \t\t// templateUrl: 'views/persian-date-picker.html',\n\n    \t\trestrict: 'AEC',\n\n    \t\treplace: true,\n\n    \t\tlink: function($scope, element, attrs){\n\n    \t\t\tjQuery(element).attr('id', \"datepicker-\"+$scope.datepickerId);\n\n\t    \t\tsetTimeout(function(){\n\t    \t\t\tjQuery(\"#datepicker-\"+$scope.datepickerId).pDatepicker({\n\t    \t\t\t\ttimePicker: {\n\t    \t\t\t\t\tenabled: true,\n\t    \t\t\t\t\tshowMeridian: false\n\t    \t\t\t\t},\n\t    \t\t\t});\n\t    \t\t}, 100);\n\n    \t\t},\n    \t\tcontroller: function($scope){\n\n    \t\t\t$scope.datepickerId = Math.floor((Math.random() * 10000) + 10000);\n\n    \t\t},\n    \t\tscope: {\n\n    \t\t}\n    \t}\n\n    });","angular\n    .module('inspinia')\n    .directive('sendOn', function(){\n    \treturn {\n    \t\ttemplateUrl: 'views/common/scheduled_sms.html',\n    \t\tlink: function($scope, element, attrs){\n    \t\t\t$scope.showScheculedSMS = false;\n\n    \t\t\t$scope.monthes = ['farvardin', 'ordibehesht', 'khordad', 'tir', 'mordad', 'shahrivar', 'mehr', 'aban', 'azar', 'dey', 'bahman', 'esfand'];\n\n    \t\t\t$scope.$root.$on('datetimeChanged', function(event, message){\n    \t\t\t\t$scope.$root.sendOnRootScope = message;\n    \t\t\t});\n    \t\t}\n    \t}\n    });","angular\n    .module('inspinia')\n    .directive('socket', function(){\n    \treturn {\n    \t\tcontroller: ['$rootScope', '$scope', 'SweetAlert', '$filter', function($rootScope, $scope, SweetAlert, $filter){\n    \t\t\tvar socket = io('158.58.185.50:8890');\n    \t\t\t$rootScope.$watch('user', function(user){\n    \t\t\t\tif(typeof user.id == 'undefined') return;\n\n    \t\t\t\tsocket.on('received_'+user.id, function(data){\n\t\t\t\t\t\tSweetAlert.swal({\n\t\t\t\t\t\t    title: $filter('translate')('NEW_MESSAGE'),\n\t\t\t\t\t\t    text: data.message,\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n    \t\t\t}, true);\n    \t\t}],\n    \t}\n    });","angular\n    .module('inspinia')\n    .directive('testSms', function(){\n    \treturn {\n    \t\ttemplateUrl: 'views/common/test_sms_template.html',\n    \t\tcontroller: function($rootScope, $scope, $modal, $attrs, charactersFactory){\n                var brand = ($attrs.brand == 'true') ? true : false;\n                var international = ($attrs.international == 'true') ? true : false;\n\n                // $scope.testMessageCharacters = 0;\n                // $scope.testMessagePages = 0;\n\n                // $scope.calculateCharactersTest = function(text){\n                //     $scope.testMessageCharacters = (typeof text != 'undefined') ? $rootScope.info.text.length : 0;\n                //     $scope.messagePages = charactersFactory.calculate($rootScope.lineIdNumbers[$rootScope.info.line], $rootScope.info.text);\n                // }\n\n    \t\t\t$scope.openTestSMSModal = function(){\n                    console.log($scope);\n                    if(brand){\n                        $modal.open({\n                            templateUrl: 'views/common/test_sms_brand.html',\n                        });\n                    } else{ \n                        if(international){\n                            $modal.open({\n                                templateUrl: 'views/common/test_sms_international.html',\n                            });\n                        } else {\n                            $modal.open({\n                                templateUrl: 'views/common/test_sms.html',\n                            });\n                        }\n                    }\n                }\n\n                $rootScope.sendTestMessageURL = 'sms/test';\n    \t\t}\n    \t}\n    });"],"sourceRoot":"/source/"}